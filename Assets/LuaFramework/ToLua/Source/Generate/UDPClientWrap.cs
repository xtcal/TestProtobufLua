//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UDPClientWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UDPClient), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Init", Init);
		L.RegFunction("UnInit", UnInit);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("GetData", GetData);
		L.RegFunction("StringConvertToBytes", StringConvertToBytes);
		L.RegFunction("BytesConvertToString", BytesConvertToString);
		L.RegFunction("ShowData", ShowData);
		L.RegFunction("GetRoomList", GetRoomList);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ServerPoint", get_ServerPoint, set_ServerPoint);
		L.RegVar("ReceiveThread", get_ReceiveThread, set_ReceiveThread);
		L.RegVar("Client", get_Client, set_Client);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UDPClient.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UDPClient.UnInit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				UDPClient.SendMsg(arg0);
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				UDPClient.SendMsg(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[], System.Net.EndPoint>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				System.Net.EndPoint arg1 = (System.Net.EndPoint)ToLua.ToObject(L, 2);
				UDPClient.SendMsg(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, byte[]>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				UDPClient.SendMsg(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string, System.Net.EndPoint>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Net.EndPoint arg1 = (System.Net.EndPoint)ToLua.ToObject(L, 2);
				UDPClient.SendMsg(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				System.Net.EndPoint arg2 = (System.Net.EndPoint)ToLua.CheckObject<System.Net.EndPoint>(L, 3);
				UDPClient.SendMsg(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UDPClient.SendMsg");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = UDPClient.GetData();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StringConvertToBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				byte[] o = UDPClient.StringConvertToBytes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				byte[] o = UDPClient.StringConvertToBytes(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UDPClient.StringConvertToBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BytesConvertToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string o = UDPClient.BytesConvertToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = UDPClient.BytesConvertToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UDPClient.BytesConvertToString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			UDPClient.ShowData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRoomList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UDPClient.GetRoomList();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerPoint(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UDPClient.ServerPoint);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveThread(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UDPClient.ReceiveThread);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Client(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UDPClient.Client);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerPoint(IntPtr L)
	{
		try
		{
			System.Net.IPEndPoint arg0 = (System.Net.IPEndPoint)ToLua.CheckObject<System.Net.IPEndPoint>(L, 2);
			UDPClient.ServerPoint = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveThread(IntPtr L)
	{
		try
		{
			System.Threading.Thread arg0 = (System.Threading.Thread)ToLua.CheckObject(L, 2, typeof(System.Threading.Thread));
			UDPClient.ReceiveThread = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Client(IntPtr L)
	{
		try
		{
			System.Net.Sockets.Socket arg0 = (System.Net.Sockets.Socket)ToLua.CheckObject<System.Net.Sockets.Socket>(L, 2);
			UDPClient.Client = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

